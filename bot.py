from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import os

TOKEN = os.getenv('TOKEN')

match_database = {
    "–ê—Ä—Å–µ–Ω–∞–ª - –ß–µ–ª—Å–∏": "‚úÖ –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ê—Ä—Å–µ–Ω–∞–ª - –ß–µ–ª—Å–∏:\n\n–ê—Ä—Å–µ–Ω–∞–ª –≤ —Å–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–æ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞—Ç–∞–∫–µ. –ß–µ–ª—Å–∏ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω –≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞—Ö. –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –°–∞–ª–∞—Ö. –í–µ—Ä–æ—è—Ç–Ω–∞ –Ω–∏—á—å—è 1-1.",
    "–ú–∞–Ω –°–∏—Ç–∏ - –õ–∏–≤–µ—Ä–ø—É–ª—å": "üî• –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ú–∞–Ω –°–∏—Ç–∏ - –õ–∏–≤–µ—Ä–ø—É–ª—å:\n\n–ú–∞–Ω –°–∏—Ç–∏ –¥–æ–º–∞ —Å–∏–ª–µ–Ω, –Ω–æ –õ–∏–≤–µ—Ä–ø—É–ª—å –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –Ω–µ—É–¥–µ—Ä–∂–∏–º. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ –≥–æ–ª–æ–≤. –í–æ–∑–º–æ–∂–µ–Ω —Å—á–µ—Ç 2-2.",
}

def start_command(update: Update, context: CallbackContext):
    keyboard = [['–ú–∞—Ç—á–∏ —Å–µ–≥–æ–¥–Ω—è']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ù–∞–∂–º–∏ ¬´–ú–∞—Ç—á–∏ —Å–µ–≥–æ–¥–Ω—è¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–≥—Ä—ã.', reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext):
    user_text = update.message.text

    if user_text == '–ú–∞—Ç—á–∏ —Å–µ–≥–æ–¥–Ω—è':
        matches_list = list(match_database.keys())
        if not matches_list:
            update.message.reply_text('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –º–∞—Ç—á–µ–π –Ω–µ—Ç!')
            return
        keyboard = [[match] for match in matches_list]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:', reply_markup=reply_markup)
    elif user_text in match_database:
        analysis = match_database[user_text]
        update.message.reply_text(analysis)
    else:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.')

def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
